import React, { PropTypes } from 'react';
import { connect } from 'react-redux';
import { getBusinessInfo } from '../../actions/business'
import { Row, Col, Modal, Input, Button, Select, Cascader, Table, AutoComplete, Radio, DatePicker, InputNumber, Checkbox } from 'antd';

import './style.css';
import CommonUtil from '../../../../assets/js/common.js';

import CIAChart from '../chart/scatter';

const RadioGroup = Radio.Group;
const RadioButton = Radio.Button;
class TestTable extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      selectedCategory: '数统企业网',
      indeterminate: true,
      checkAll: false,
      tableData: {},
      isSelectAll: false,
      seletedProductSeries:[]
    };
    this.allSelectedCatgorysMap=new Map();
    const standardData = this.getStandardData();
    this.state.tableData = standardData;
  }

  getTableData() {
    const dataObj = [
      {
        SPQName: '301总医院项目',
        SPQID: '123',
        FrameNumber: '567',
        ProjectDate: '2015/12/12~2016/11/11',
        TotalAmount: 1234.32,
        PassCondition: 'XXXXX',
        ProductCategory: '数统企业网',
        ProductSeries: 'AR SMB1',
        ProductSeriesAmount: '323.32',
        Discount: 32
      },
      {
        SPQName: '301总医院项目',
        SPQID: '123',
        FrameNumber: '567',
        ProjectDate: '2015/12/12~2016/11/11',
        TotalAmount: 1234.32,
        PassCondition: 'XXXXX',
        ProductCategory: '数统企业网',
        ProductSeries: 'AR SMB2',
        ProductSeriesAmount: '323.32',
        Discount: 32
      },
      {
        SPQName: '301总医院项目',
        SPQID: '123',
        FrameNumber: '567',
        ProjectDate: '2015/12/12~2016/11/11',
        TotalAmount: 1234.32,
        PassCondition: 'XXXXX',
        ProductCategory: '服务器',
        ProductSeries: 'AR SMB3',
        ProductSeriesAmount: '323.32',
        Discount: 32
      }
      ,
      {
        SPQName: '21世纪经济',
        SPQID: '123q',
        FrameNumber: '567',
        ProjectDate: '2015/12/12~2016/11/11',
        TotalAmount: 1234.32,
        PassCondition: 'XXXXX',
        ProductCategory: '服务器',
        ProductSeries: 'AR SMB1',
        ProductSeriesAmount: '323.32',
        Discount: 32
      }
      ,
      {
        SPQName: '21世纪经济',
        SPQID: '123q',
        FrameNumber: '567',
        ProjectDate: '2015/12/12~2016/11/11',
        TotalAmount: 1234.32,
        PassCondition: 'XXXXX',
        ProductCategory: '路由器',
        ProductSeries: 'AR SMB2',
        ProductSeriesAmount: '323.32',
        Discount: 32
      },
      {
        SPQName: '21世纪经济',
        SPQID: '123q',
        FrameNumber: '567',
        ProjectDate: '2015/12/12~2016/11/11',
        TotalAmount: 1234.32,
        PassCondition: 'XXXXX',
        ProductCategory: '路由器',
        ProductSeries: 'AR SMB3',
        ProductSeriesAmount: '323.32',
        Discount: 32
      },
      {
        SPQName: '21世纪经济',
        SPQID: '123q',
        FrameNumber: '567',
        ProjectDate: '2015/12/12~2016/11/11',
        TotalAmount: 1234.32,
        PassCondition: 'XXXXX',
        ProductCategory: '路由器',
        ProductSeries: 'AR SMB3',
        ProductSeriesAmount: '323.32',
        Discount: 32
      }
    ]

    return dataObj;
  }

  getGroupDataFromRows(groupFlag, rows) {
    const groupMap = new Map();
    for (const item of rows) {
      if (groupMap.has(item[groupFlag])) {
        const groupsData = groupMap.get(item[groupFlag]);
        groupsData.push(item);
      } else {
        const groupsData = [];
        groupsData.push(item);
        groupMap.set(item[groupFlag], groupsData);
      }
    }
    return groupMap;
  }


  getProductRowsInfoFromData(productCategoryGroupMap) {
    const rows = [];
    for (const [key, value] of productCategoryGroupMap) {
      const oneRow = {
        ProductCategory: key,
        ProductSeries: value
      }
      rows.push(oneRow);
    }
    return rows;
  }

  getStandardData() {
    const tableData = this.getTableData();
    const projectGroupData = this.getGroupDataFromRows('SPQID', tableData);
    const standardData = [];
    for (const [key, value] of projectGroupData) {
      const oneProject = {
        SPQID: key,
        ProductCategory: []
      }
      const productCategoryGroupMap = this.getGroupDataFromRows('ProductCategory', value);
      oneProject.ProductCategory = this.getProductRowsInfoFromData(productCategoryGroupMap);
      standardData.push(oneProject);
    }
    return standardData;
  }



  generateTableRows() {

    const rows = [];
    const _this = this;
    this.state.tableData.map(function (projectItem) {
      let projectIndex = 0;
      let projectRowSpan = 0;
      let isCreateProjectTd;
      if (projectIndex === 0) {
        projectItem.ProductCategory.map((items) => {
          projectRowSpan += items.ProductSeries.length;
          isCreateProjectTd = true;
        });

      } else {
        projectRowSpan = 0;
        isCreateProjectTd = false;
      }

      projectItem.ProductCategory.map((categoryItems) => {
        let categoryIndex = 0;
        let categoryRowSpan = categoryItems.ProductSeries.length;
        let isCreateCategoryTd;
        if (categoryIndex === 0) {
          categoryRowSpan = categoryItems.ProductSeries.length;
          isCreateCategoryTd = true;
        } else {
          categoryRowSpan = 0;
          isCreateCategoryTd = false;
        }

        categoryItems.ProductSeries.map((seriesItems) => {
          const tr = <tr>
            {isCreateProjectTd ? <td rowSpan={projectRowSpan}>
              <Checkbox checked={_this.getCheckedStatusBySPQID(seriesItems.SPQID)} onChange={_this.onCheckProjectChange.bind(_this, seriesItems.SPQID)}></Checkbox></td> : ''}
            {isCreateProjectTd ? <td rowSpan={projectRowSpan}>{seriesItems.SPQName}</td> : ''}
            {isCreateProjectTd ? <td rowSpan={projectRowSpan}>{seriesItems.SPQID}</td> : ''}
            {isCreateProjectTd ? <td rowSpan={projectRowSpan}>{seriesItems.ProjectDate}</td> : ''}
            {isCreateProjectTd ? <td rowSpan={projectRowSpan}>{seriesItems.TotalAmount}</td> : ''}
            {isCreateProjectTd ? <td rowSpan={projectRowSpan}>{seriesItems.PassCondition}</td> : ''}
            {isCreateCategoryTd ? <td rowSpan={categoryRowSpan}>{seriesItems.ProductCategory}</td> : ''}
            {isCreateCategoryTd ? <td rowSpan={categoryRowSpan}>{123.33}</td> : ''}
            <td >{seriesItems.ProductSeries}</td>
            <td >{seriesItems.ProductSeriesAmount}</td>
            <td >{seriesItems.Discount}</td>
          </tr>;

          rows.push(tr);
          isCreateProjectTd = false;
          isCreateCategoryTd = false;
          projectIndex++;
          categoryIndex++;
        });
      })
    })
    return rows;
  }

  getCheckedStatusBySPQID(SPQID){
    let checkedStatus = false;
    this.state.tableData.map(item => {
      if (item.SPQID === SPQID) {
         if(item.selected){
           checkedStatus = true;
         }
      }
    }); 
    return checkedStatus; 
  }

  onCheckAllChange(e) {
    this.state.tableData.map(item => {
      item.selected = !this.state.isSelectAll;
    });
    this.allSelectedCatgorysMap = this.getAllSelectedCategorys();
    let selectedCategory = "";
    for(const [key,value] of this.allSelectedCatgorysMap){
      selectedCategory =  key;
      break;
    }

    this.setState({
      isSelectAll: !this.state.isSelectAll,
      selectedCategory
    });

  }

  onCheckProjectChange(SPQID,e) {
    const isChecked = e.target.checked;
    for(const item of this.state.tableData){
      if (item.SPQID === SPQID ) {
        item.selected = isChecked;
      }       
    }
    this.allSelectedCatgorysMap = this.getAllSelectedCategorys();
    let selectedCategory = "";
    for(const [key,value] of this.allSelectedCatgorysMap){
      selectedCategory =  key;
      break;
    }
    this.setState({
      isSelectAll: this.isAllSelected(),
      selectedCategory
    });
  }

  isAllSelected(){
    let isAllSelected = true;
    this.state.tableData.map(item => {
      if (!!!item.selected) {
         isAllSelected = false;
      }
    });
    return isAllSelected;
  }

  onCategoryChange(e) {
    console.log('radio checked', e.target.value);
    const seletedProductSeries = this.allSelectedCatgorysMap.get(e.target.value);
    this.setState({
      selectedCategory: e.target.value,
      seletedProductSeries
    });
    
  }

  onSeriesChange(e) {
    console.log(`radio checked:${e.target.value}`);
  }

  getAllSelectedCategorys(){
    const groupMap = new Map();
    //归集所有选中项目中的产品大类，如果产品大类中子系列相同需要合并子系列
    this.state.tableData.map(item => {
       if (item.selected) {
          item.ProductCategory.map(categoryItem=>{
            if (groupMap.has(categoryItem.ProductCategory)) {
              const groupsData = groupMap.get(categoryItem.ProductCategory);
              groupsData.push(...categoryItem.ProductSeries);
            } else {
              const groupsData = [];
              groupsData.push(...categoryItem.ProductSeries);
              groupMap.set(categoryItem.ProductCategory, groupsData);
            }          
          });
       }
    });

    return groupMap;
  }

  generateCategoryGroupRadio(){
   
    const radios = [];
    for(const [key, value] of this.allSelectedCatgorysMap){
      debugger;
      radios.push(<Radio value={key}>{key}</Radio>);  
    }
    if(radios.length === 0){
      this.state.seletedProductSeries = [];
    }
    return radios;
  }

  generateSeletedProductSeries(){
    const buttons = [];
    debugger;
    
    this.state.seletedProductSeries = this.allSelectedCatgorysMap.get(this.state.selectedCategory);
    if(this.state.seletedProductSeries){
      this.state.seletedProductSeries.map(items=>{
          buttons.push(<RadioButton value={items.ProductSeries}>{items.ProductSeries}</RadioButton>);    
        });
    }
    
    return buttons;
  }


  render() {

    return (
      <div className='business-info-container'>
        <div className='table-content'>
          <table className='history-table'>
            <thead>
              <th><Checkbox onChange={this.onCheckAllChange.bind(this)} checked={this.state.isSelectAll} ></Checkbox></th>
              <th>特价/项目名称</th>
              <th>特价编号</th>
              <th>项目时间</th>
              <th>总金额</th>
              <th>特价条件通过</th>
              <th>产品大类</th>
              <th>产品大类金额</th>
              <th>产品系列</th>
              <th>产品系列金额</th>
              <th>产品折扣</th>
            </thead>
            {this.generateTableRows()}
          </table>
        </div>
        <div>

          <div className='changeCata'>
            <RadioGroup onChange={this.onCategoryChange.bind(this)} value={this.state.selectedCategory}>
              {this.generateCategoryGroupRadio()}
            </RadioGroup>
          </div>

          <div>
            <RadioGroup onChange={this.onSeriesChange.bind(this)} defaultValue="a">
              {this.generateSeletedProductSeries()}
            </RadioGroup>
          </div>

        </div>
        <CIAChart />
      </div>


    );
  }
}

const mapStateToProps = (state) => {
  return {
    businessData: state.businessReducer.data//,
    //BusinessId: state.commonReducer.ProjectData.BusinessId
  }
}

export default connect(mapStateToProps)(TestTable)

.business-info-container td {
    text-align: center;
    font-size: 12px;
    color: #999;
    height: 25px;
    border: 1px solid #DCE5EA;
}


.business-info-container th{
    height: 25px;
    text-align: center;
    font-size: 12px;
    color: white;
    font-size: 14px;
    border: 1px solid #DCE5EA;
    background-color: #2db7f5;
}

.business-info-container table{
    width: 100%;
    border-collapse: collapse;
}


.business-info-container .stairsContent{
    display: -webkit-flex; /* Safari */
    display: flex;
    flex-direction: column ;
    height: 50px;
    min-width: 200px;
}

.business-info-container .tdTop{
    background-color: #A3E0FF;
    color: #ff0000;
    font-size: 16px;
    font-weight: 500;    
    flex:1;
    height: 25px;
    display: flex;
    align-items:center;
    justify-content: center;
}

.business-info-container .tdBottom{
    display: flex;
    flex-direction: row ;
    height: 25px;
}

.business-info-container .tdBottomLeft{
    background-color: #C8EBFF;
    color: #f7931e;
    font-size: 12px;
    font-weight: 500;    
    flex:1;
    text-overflow: ellipsis;
    overflow:hidden;
    display: flex;
    align-items:center;
    justify-content: center;
}

.business-info-container .tdBottomRight{
    background-color:#E1F5FE;
    color:#203c4b;
    font-size: 12px;
    font-weight: 500;    
    flex:1;
    text-overflow: ellipsis;
    overflow:hidden;
    display: flex;
    align-items:center;
    justify-content: center;
}

.business-info-container .center{
    display: flex;
    align-items:center;
    justify-content: center;    
}

.business-info-container .history-table{
    min-width: 1300px;
}

.business-info-container .table-content{
    overflow-x: auto;
}

.business-info-container {
    overflow-x: auto;
}

.business-info-container .titleText{
    font-size: 14px;
    color: #666;
    margin: 5px;
}

.business-info-container .stageCell{
    background-color:#fafafa;
}

.business-info-container .link{
    color: #29abe2;
}

.business-info-container .showOrHideButton{
    color: #fa0;
    cursor:pointer;
    font-size: 16px;
    margin-left: 5px;
}

.business-info-container .tdtitle{
      min-width: 180px;
      text-align: left;
}

.business-info-container .tdstairs{
      min-width: 200px;
      height: 50px
}

.business-info-container .noServer{
    font-size: 11px;
    color: black;
}

.business-info-container .percent{
    color: #29abe2;
}

.business-info-container .changeCata{
    border-left-width: 15px;
    padding-left: 15px;
    margin-top: 12px;
    margin-bottom: 5px;
    background-color: #e8e8e8;
}
         
.business-info-container .ant-radio-button-wrapper-checked{
    border-left: 1px #eeeeee solid;
    border-top: 1px #eeeeee solid;
    border-right: 1px #eeeeee solid;
    border-bottom: 3px #A3E0FF solid;
    background: white;
    color: black;
    box-shadow: -1px 0 0 0 #eeeeee; 
}
